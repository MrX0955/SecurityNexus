import socket
import json
import requests
import datetime
from colorama import Fore
from core.config import _, config, Settings
from utils.helpers import clear, save_to_history, save_report, process_and_print_request

class VulnerabilityOperations:
    @staticmethod
    def cve_lookup():
        clear()
        print(f"{Fore.CYAN}{_('cve_lookup')}{Fore.RESET}\n")
        cve_id = input(f"{Fore.MAGENTA}{_('enter_cve_id')} (CVE-YYYY-XXXXX): {Fore.RESET}")
        
        if cve_id:
            if cve_id.startswith("CVE-") and len(cve_id) >= 10:
                url = f"https://services.nvd.nist.gov/rest/json/cve/1.0/{cve_id}"
                try:
                    response = requests.get(url, headers=Settings.headers2, timeout=config.get("settings", {}).get("default_timeout", 10))
                    
                    # Yanıt içeriğini kontrol et
                    if not response.text or response.text.isspace():
                        print(f"{Fore.RED}API yanıtı boş veya geçersiz.{Fore.RESET}")
                        input(f"\n{_('continue_prompt')}")
                        clear()
                        return
                    
                    try:
                        data = response.json()
                    except json.JSONDecodeError:
                        print(f"{Fore.RED}API yanıtı geçerli JSON formatında değil: {response.text[:100]}{Fore.RESET}")
                        input(f"\n{_('continue_prompt')}")
                        clear()
                        return
                    
                    if 'result' in data and 'CVE_Items' in data['result'] and data['result']['CVE_Items']:
                        cve_item = data['result']['CVE_Items'][0]
                        cve_data = cve_item['cve']
                        impact = cve_item.get('impact', {})
                        
                        print(f"\n{Fore.GREEN}CVE ID: {cve_id}{Fore.RESET}")
                        
                        if 'description' in cve_data and 'description_data' in cve_data['description']:
                            for desc in cve_data['description']['description_data']:
                                if desc['lang'] == 'en':
                                    print(f"{Fore.YELLOW}Description: {Fore.RESET}{desc['value']}")
                        
                        if 'baseMetricV3' in impact:
                            cvss3 = impact['baseMetricV3']['cvssV3']
                            print(f"\n{Fore.YELLOW}CVSS v3 Score: {Fore.RESET}{cvss3['baseScore']} ({cvss3['baseSeverity']})")
                            print(f"{Fore.YELLOW}Attack Vector: {Fore.RESET}{cvss3['attackVector']}")
                            print(f"{Fore.YELLOW}Attack Complexity: {Fore.RESET}{cvss3['attackComplexity']}")
                            print(f"{Fore.YELLOW}Privileges Required: {Fore.RESET}{cvss3['privilegesRequired']}")
                            print(f"{Fore.YELLOW}User Interaction: {Fore.RESET}{cvss3['userInteraction']}")
                            print(f"{Fore.YELLOW}Scope: {Fore.RESET}{cvss3['scope']}")
                            print(f"{Fore.YELLOW}Confidentiality: {Fore.RESET}{cvss3['confidentialityImpact']}")
                            print(f"{Fore.YELLOW}Integrity: {Fore.RESET}{cvss3['integrityImpact']}")
                            print(f"{Fore.YELLOW}Availability: {Fore.RESET}{cvss3['availabilityImpact']}")
                        
                        if 'references' in cve_data and 'reference_data' in cve_data['references']:
                            print(f"\n{Fore.YELLOW}References:{Fore.RESET}")
                            for ref in cve_data['references']['reference_data'][:5]:
                                print(f"  - {ref['url']}")
                            
                            if len(cve_data['references']['reference_data']) > 5:
                                print(f"  ... and {len(cve_data['references']['reference_data']) - 5} more references.")
                        
                        save_to_history("cve_lookup", {
                            "cve_id": cve_id,
                            "data": data
                        })
                        
                        save_report("vulnerability", {
                            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "cve_id": cve_id,
                            "data": data
                        })
                        
                    else:
                        print(f"{Fore.RED}CVE bilgisi bulunamadı veya API yanıtında hata var.{Fore.RESET}")
                
                except Exception as e:
                    print(f"{Fore.RED}Hata: {e}{Fore.RESET}")
            else:
                print(f"{Fore.RED}Geçersiz CVE formatı. CVE-YYYY-XXXXX formatını kullanın.{Fore.RESET}")
            
            input(f"\n{_('continue_prompt')}")
            clear()

    @staticmethod
    def vulnerability_scanner():
        clear()
        print(f"{Fore.CYAN}{_('vulnerability_scanner')}{Fore.RESET}\n")
        target = input(f"{Fore.MAGENTA}{_('enter_target')} (IP/domain): {Fore.RESET}")
        
        if target:
            shodan_key = config.get("api_keys", {}).get("shodan", "")
            
            if not shodan_key:
                print(f"{Fore.YELLOW}Bu özellik Shodan API anahtarı gerektirir.{Fore.RESET}")
                print(f"{Fore.YELLOW}Lütfen API anahtarınızı config.json dosyasına ekleyin.{Fore.RESET}")
                input(f"\n{_('continue_prompt')}")
                clear()
                return
            
            print(f"{Fore.YELLOW}Hedef için zafiyet taraması yapılıyor: {target}{Fore.RESET}")
            
            try:

                if not all(c.isdigit() or c == '.' for c in target):
                    try:
                        ip = socket.gethostbyname(target)
                        print(f"{Fore.GREEN}Domain çözümlendi: {target} -> {ip}{Fore.RESET}")
                        target = ip
                    except:
                        print(f"{Fore.RED}Domain IP adresine çözümlenemedi: {target}{Fore.RESET}")
                        input(f"\n{_('continue_prompt')}")
                        clear()
                        return

                url = f"https://api.shodan.io/shodan/host/{target}?key={shodan_key}"
                response = requests.get(url, timeout=config.get("settings", {}).get("default_timeout", 10))
                
                if response.status_code == 200:
                    data = response.json()
                    
                    print(f"\n{Fore.GREEN}Hedef: {target}{Fore.RESET}")
                    
                    if 'hostnames' in data and data['hostnames']:
                        print(f"{Fore.YELLOW}Hostname(s): {Fore.RESET}{', '.join(data['hostnames'])}")
                    
                    if 'country_name' in data:
                        print(f"{Fore.YELLOW}Ülke: {Fore.RESET}{data.get('country_name', 'Bilinmiyor')}")
                    
                    if 'org' in data:
                        print(f"{Fore.YELLOW}Organizasyon: {Fore.RESET}{data.get('org', 'Bilinmiyor')}")
                    
                    if 'os' in data:
                        print(f"{Fore.YELLOW}İşletim Sistemi: {Fore.RESET}{data.get('os', 'Bilinmiyor')}")
                    
                    if 'ports' in data:
                        print(f"{Fore.YELLOW}Açık Portlar: {Fore.RESET}{', '.join(map(str, data['ports']))}")

                    vulnerabilities = []
                    if 'vulns' in data:
                        print(f"\n{Fore.RED}Tespit Edilen Zafiyetler:{Fore.RESET}")
                        for vuln_id in data['vulns']:
                            cvss = data['vulns'][vuln_id].get('cvss', 'N/A')
                            print(f"  - {vuln_id} (CVSS: {cvss})")
                            vulnerabilities.append({
                                "id": vuln_id,
                                "cvss": cvss
                            })
                    else:
                        print(f"\n{Fore.GREEN}Bilinen zafiyet bulunamadı.{Fore.RESET}")

                    report_data = {
                        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "target": target,
                        "ports": data.get('ports', []),
                        "os": data.get('os', 'Unknown'),
                        "organization": data.get('org', 'Unknown'),
                        "hostnames": data.get('hostnames', []),
                        "country": data.get('country_name', 'Unknown'),
                        "vulnerabilities": vulnerabilities
                    }
                    
                    save_to_history("vulnerability_scan", report_data)
                    save_report("vulnerability", report_data)
                    
                elif response.status_code == 404:
                    print(f"{Fore.YELLOW}Shodan'da hedef hakkında bilgi bulunamadı: {target}{Fore.RESET}")
                else:
                    print(f"{Fore.RED}Shodan API yanıt hatası: {response.status_code} - {response.text}{Fore.RESET}")
            
            except Exception as e:
                print(f"{Fore.RED}Hata: {e}{Fore.RESET}")
            
            input(f"\n{_('continue_prompt')}")
            clear()

    @staticmethod
    def web_vulnerability_scanner():
        clear()
        print(f"{Fore.CYAN}{_('web_vulnerability_scanner')}{Fore.RESET}\n")
        url = input(f"{Fore.MAGENTA}{_('enter_url')} (https://example.com): {Fore.RESET}")
        
        if url:
            if not url.startswith("http"):
                url = "https://" + url
            
            print(f"{Fore.YELLOW}Web uygulaması için zafiyet taraması yapılıyor: {url}{Fore.RESET}")
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            }
            
            vulnerabilities = []
            scan_results = []
            
            try:

                response = requests.get(url, headers=headers, timeout=config.get("settings", {}).get("default_timeout", 10), verify=False)
                status_code = response.status_code
                server_header = response.headers.get('Server', 'Bilinmiyor')
                
                print(f"\n{Fore.GREEN}Hedef URL: {url}{Fore.RESET}")
                print(f"{Fore.YELLOW}Durum Kodu: {Fore.RESET}{status_code}")
                print(f"{Fore.YELLOW}Sunucu: {Fore.RESET}{server_header}")
                
                scan_results.append(f"Status Code: {status_code}")
                scan_results.append(f"Server: {server_header}")

                security_headers = {
                    "Strict-Transport-Security": "HSTS (HTTP Strict Transport Security)",
                    "Content-Security-Policy": "CSP (Content Security Policy)",
                    "X-Content-Type-Options": "X-Content-Type-Options",
                    "X-Frame-Options": "X-Frame-Options",
                    "X-XSS-Protection": "X-XSS-Protection"
                }
                
                print(f"\n{Fore.CYAN}Güvenlik Başlıkları:{Fore.RESET}")
                missing_headers = []
                
                for header, desc in security_headers.items():
                    if header in response.headers:
                        print(f"  {Fore.GREEN}✓ {desc}: {response.headers[header]}{Fore.RESET}")
                        scan_results.append(f"{desc}: {response.headers[header]}")
                    else:
                        print(f"  {Fore.RED}✗ {desc} eksik{Fore.RESET}")
                        scan_results.append(f"{desc}: Missing")
                        missing_headers.append(desc)
                        vulnerabilities.append({
                            "type": "missing_security_header",
                            "header": header,
                            "description": f"Missing {desc} security header"
                        })

                print(f"\n{Fore.CYAN}Genel Güvenlik Değerlendirmesi:{Fore.RESET}")

                if url.startswith("http://"):
                    print(f"  {Fore.RED}✗ Site HTTPS yerine HTTP kullanıyor{Fore.RESET}")
                    scan_results.append("SSL/TLS: Not used (HTTP)")
                    vulnerabilities.append({
                        "type": "no_https",
                        "description": "Website uses HTTP instead of HTTPS"
                    })
                else:
                    print(f"  {Fore.GREEN}✓ Site HTTPS kullanıyor{Fore.RESET}")
                    scan_results.append("SSL/TLS: Used (HTTPS)")

                report_data = {
                    "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "target_url": url,
                    "scan_results": scan_results,
                    "vulnerabilities": vulnerabilities,
                    "security_headers": {header: response.headers.get(header, "Missing") for header in security_headers}
                }
                
                save_to_history("web_vulnerability_scan", report_data)
                save_report("web_vulnerability", report_data)
                
                if vulnerabilities:
                    vuln_count = len(vulnerabilities)
                    print(f"\n{Fore.RED}Toplam {vuln_count} potansiyel güvenlik sorunu tespit edildi.{Fore.RESET}")
                else:
                    print(f"\n{Fore.GREEN}Hiçbir yaygın güvenlik sorunu tespit edilmedi.{Fore.RESET}")
                    print(f"{Fore.YELLOW}Not: Bu basit bir taramadır ve tüm zafiyetleri tespit etmeyebilir.{Fore.RESET}")
                
            except Exception as e:
                print(f"{Fore.RED}Hata: {e}{Fore.RESET}")
            
            input(f"\n{_('continue_prompt')}")
            clear() 